import sys
import importlib.abc
import importlib.util
from types import ModuleType

# This is where your dynamic code generation logic will live.
# For this example, we'll generate a simple function based on the import path.
def generate_code(module_name):
    """
    Dynamically generates Python code for a given module name.
    
    Example: if module_name is 'importsim.hello.world', this could
    generate a function that prints a greeting from 'world'.
    """
    parts = module_name.split('.')
    last_part = parts[-1] if len(parts) > 1 else 'root'
    
    code = f"""
print(f"Module '{module_name}' was dynamically generated by importsim!")

def greet():
    '''A dynamically generated function.'''
    print(f"Hello from the dynamically created '{last_part}' module!")

MESSAGE = "This constant was created on the fly."
"""
    return code


class ImportSimLoader(importlib.abc.Loader):
    """
    The custom loader. Its job is to execute the dynamically generated code.
    """
    def __init__(self, fullname):
        self.fullname = fullname

    def create_module(self, spec):
        # The loader is asked to create the module object.
        # Returning None is fine; the import machinery will create it.
        return None

    def exec_module(self, module):
        """
        This is the core of the magic!
        This method is called to "execute" the module's code.
        """
        try:
            # Generate the code based on the module's name.
            code = generate_code(module.__name__)
            
            # Execute the generated code in the new module's namespace.
            # This is like running a .py file, but the source is in memory.
            exec(code, module.__dict__)
            module.__path__ = []
        except Exception as e:
            print(f"Failed to dynamically create module {module.__name__}: {e}")
            raise

class ImportSimFinder(importlib.abc.MetaPathFinder):
    """
    The custom finder. Its job is to tell Python we can handle
    any import that starts with 'importsim.'.
    """
    def find_spec(self, fullname, path, target=None):
        """
        Python calls this method to see if we can handle the import.
        `fullname` is the full name of the module, e.g., 'importsim.foo.bar'.
        """
        # We only care about modules inside our 'importsim' namespace.
        if fullname.startswith('importsim'):
            # If we can handle it, we return a ModuleSpec.
            # The spec tells Python to use our custom ImportSimLoader.
            return importlib.util.spec_from_loader(
                fullname, 
                ImportSimLoader(fullname),
                is_package=True
            )
        
        # If the import is not for us, return None to let other finders handle it.
        return None